/**
 * Social Media Feeds Widget
 * –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–∞–º–æ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –≤–∏–¥–∂–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–∏–¥–æ–≤ –∏–∑ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π
 */
(function() {
    'use strict';
    
    // –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏ (–ø–æ–ª–Ω—ã–π CSS –≤–Ω—É—Ç—Ä–∏ JS)
    const inlineCSS = `
        .sfw-container {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            max-width: 1200px;
            margin: 20px auto;
        }
        .sfw-widget {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 20px 60px rgba(102,126,234,0.4);
            color: white;
            position: relative;
            overflow: hidden;
        }
        .sfw-widget::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: radial-gradient(circle at 30% 20%, rgba(255,255,255,0.15) 0%, transparent 50%);
            pointer-events: none;
        }
        .sfw-title {
            font-size: 1.8em;
            font-weight: 700;
            margin: 0 0 25px 0;
            text-shadow: 0 2px 8px rgba(0,0,0,0.3);
            position: relative;
            z-index: 1;
            text-align: center;
        }
        .sfw-feeds {
            display: grid;
            gap: 20px;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            position: relative;
            z-index: 1;
        }
        .sfw-feeds.list-layout {
            grid-template-columns: 1fr;
        }
        .sfw-item {
            background: rgba(255,255,255,0.15);
            backdrop-filter: blur(15px);
            border: 1px solid rgba(255,255,255,0.3);
            border-radius: 16px;
            padding: 20px;
            transition: all 0.3s cubic-bezier(0.4,0,0.2,1);
            position: relative;
        }
        .sfw-item:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 35px rgba(0,0,0,0.2);
            background: rgba(255,255,255,0.25);
        }
        .sfw-item.tiktok { border-left: 4px solid #FF0050; }
        .sfw-item.instagram { border-left: 4px solid #E4405F; }
        .sfw-item.facebook { border-left: 4px solid #1877F2; }
        .sfw-item.linkedin { border-left: 4px solid #0A66C2; }
        .sfw-item.whatsapp { border-left: 4px solid #25D366; }
        .sfw-header {
            display: flex;
            align-items: center;
            margin-bottom: 15px;
        }
        .sfw-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            margin-right: 12px;
            border: 2px solid rgba(255,255,255,0.7);
        }
        .sfw-meta {
            flex: 1;
        }
        .sfw-author {
            font-weight: 600;
            font-size: 14px;
            margin: 0 0 4px 0;
        }
        .sfw-time {
            font-size: 12px;
            opacity: 0.8;
        }
        .sfw-platform-icon {
            font-size: 18px;
            margin-left: auto;
        }
        .sfw-content {
            font-size: 14px;
            line-height: 1.5;
            margin-bottom: 15px;
        }
        .sfw-actions {
            display: flex;
            gap: 15px;
            font-size: 12px;
        }
        .sfw-action {
            background: rgba(255,255,255,0.2);
            padding: 4px 8px;
            border-radius: 8px;
            display: flex;
            align-items: center;
            gap: 4px;
        }
        .sfw-loading {
            text-align: center;
            padding: 60px 20px;
            background: rgba(255,255,255,0.1);
            border-radius: 16px;
            backdrop-filter: blur(10px);
        }
        .sfw-spinner {
            width: 40px;
            height: 40px;
            border: 3px solid rgba(255,255,255,0.3);
            border-top: 3px solid white;
            border-radius: 50%;
            animation: sfw-spin 1s linear infinite;
            margin: 0 auto 15px;
        }
        .sfw-error {
            background: linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%);
            padding: 30px;
            border-radius: 16px;
            text-align: center;
            color: white;
            box-shadow: 0 15px 40px rgba(255,107,107,0.4);
        }
        @keyframes sfw-spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        @keyframes sfw-fadeInUp {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        .sfw-item.animated {
            animation: sfw-fadeInUp 0.6s ease-out forwards;
        }
        @media (max-width: 768px) {
            .sfw-feeds {
                grid-template-columns: 1fr;
                gap: 15px;
            }
            .sfw-widget {
                padding: 20px;
            }
            .sfw-title {
                font-size: 1.5em;
            }
        }
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –æ–¥–∏–Ω —Ä–∞–∑ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    if (!document.getElementById('sfw-styles')) {
        const style = document.createElement('style');
        style.id = 'sfw-styles';
        style.textContent = inlineCSS;
        document.head.appendChild(style);
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π script —Ç–µ–≥
    const currentScript = document.currentScript || 
        (function() {
            const scripts = document.getElementsByTagName('script');
            return scripts[scripts.length - 1];
        })();
    
    const clientId = currentScript.dataset.id;
    if (!clientId) {
        console.error('[SocialFeedsWidget] data-id –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
        return;
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–π URL (–æ—Ç–∫—É–¥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω embed.js)
    const baseUrl = currentScript.src.replace(/\/[^\/]+$/, '');
    const configUrl = `${baseUrl}/configs/${encodeURIComponent(clientId)}.json`;
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    const container = document.createElement('div');
    container.id = `sfw-${clientId}`;
    container.className = 'sfw-container';
    currentScript.parentNode.insertBefore(container, currentScript.nextSibling);
    
    // –ö–ª–∞—Å—Å –≤–∏–¥–∂–µ—Ç–∞
    class SocialFeedsWidget {
        constructor(containerEl, configUrl) {
            this.container = containerEl;
            this.configUrl = configUrl;
            this.config = {};
            this.cache = new Map();
            this.refreshTimer = null;
            this.init();
        }
        
        async init() {
            try {
                this.showLoading();
                await this.loadConfig();
                await this.render();
                this.startAutoRefresh();
                console.log(`[SocialFeedsWidget] –í–∏–¥–∂–µ—Ç ${clientId} —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω`);
            } catch (error) {
                this.showError('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏', error);
            }
        }
        
        showLoading() {
            this.container.innerHTML = `
                <div class="sfw-widget">
                    <div class="sfw-loading">
                        <div class="sfw-spinner"></div>
                        <div>–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ñ–∏–¥–æ–≤...</div>
                    </div>
                </div>
            `;
        }
        
        async loadConfig() {
            const response = await fetch(this.configUrl, {
                cache: 'no-cache',
                headers: { 'Accept': 'application/json' }
            });
            
            if (!response.ok) {
                throw new Error(`–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (${response.status})`);
            }
            
            this.config = await response.json();
        }
        
        async render() {
            const feeds = await this.loadFeeds();
            const layout = this.config.layout === 'list' ? 'list-layout' : '';
            
            if (feeds.length === 0) {
                this.container.innerHTML = `
                    <div class="sfw-widget">
                        <div class="sfw-loading">üì≠ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∏–¥–æ–≤</div>
                    </div>
                `;
                return;
            }
            
            const feedsHTML = feeds.map((feed, index) => `
                <div class="sfw-item ${feed.platform} ${this.config.animation ? 'animated' : ''}" 
                     style="animation-delay: ${index * 0.1}s">
                    ${this.config.showAvatars !== false ? `
                        <div class="sfw-header">
                            <img class="sfw-avatar" src="${feed.avatar}" alt="${feed.author}" loading="lazy">
                            <div class="sfw-meta">
                                <div class="sfw-author">${this.escapeHtml(feed.author)}</div>
                                ${this.config.showTimestamp !== false ? `
                                    <div class="sfw-time">${this.formatTime(feed.timestamp)}</div>
                                ` : ''}
                            </div>
                            <div class="sfw-platform-icon">${this.getPlatformIcon(feed.platform)}</div>
                        </div>
                    ` : ''}
                    <div class="sfw-content">${this.escapeHtml(feed.content)}</div>
                    <div class="sfw-actions">
                        ${feed.likes ? `<div class="sfw-action">‚ù§Ô∏è ${feed.likes}</div>` : ''}
                        ${feed.comments ? `<div class="sfw-action">üí¨ ${feed.comments}</div>` : ''}
                        ${feed.shares ? `<div class="sfw-action">‚ÜóÔ∏è ${feed.shares}</div>` : ''}
                    </div>
                </div>
            `).join('');
            
            this.container.innerHTML = `
                <div class="sfw-widget">
                    ${this.config.title ? `<h2 class="sfw-title">${this.escapeHtml(this.config.title)}</h2>` : ''}
                    <div class="sfw-feeds ${layout}">
                        ${feedsHTML}
                    </div>
                </div>
            `;
        }
        
        async loadFeeds() {
            const platforms = this.config.platforms || [];
            const maxPosts = this.config.maxPosts || 10;
            let allFeeds = [];
            
            for (const platform of platforms) {
                try {
                    const feeds = await this.fetchPlatformFeeds(platform);
                    allFeeds.push(...feeds);
                } catch (error) {
                    console.warn(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${platform}:`, error);
                }
            }
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            allFeeds = this.applyFilters(allFeeds);
            
            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            return allFeeds
                .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp))
                .slice(0, maxPosts);
        }
        
        async fetchPlatformFeeds(platform) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à (5 –º–∏–Ω—É—Ç)
            const cacheKey = `feeds_${platform}`;
            const cached = this.cache.get(cacheKey);
            if (cached && (Date.now() - cached.timestamp) < 300000) {
                return cached.data;
            }
            
            // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥—É—Ç API –≤—ã–∑–æ–≤—ã)
            const mockData = {
                tiktok: [
                    {
                        id: 'tk1',
                        platform: 'tiktok',
                        author: 'TikTok Creator',
                        avatar: 'https://via.placeholder.com/40x40/FF0050/white?text=TK',
                        content: '–ö—Ä—É—Ç–æ–π TikTok –∫–æ–Ω—Ç–µ–Ω—Ç! üéµ –ù–æ–≤—ã–π —Ç—Ä–µ–Ω–¥ –Ω–∞–±–∏—Ä–∞–µ—Ç –æ–±–æ—Ä–æ—Ç—ã #viral #trending',
                        timestamp: new Date(Date.now() - Math.random() * 86400000).toISOString(),
                        likes: Math.floor(Math.random() * 2000) + 100,
                        comments: Math.floor(Math.random() * 200) + 10,
                        shares: Math.floor(Math.random() * 500) + 20
                    }
                ],
                instagram: [
                    {
                        id: 'ig1',
                        platform: 'instagram',
                        author: 'Instagram User',
                        avatar: 'https://via.placeholder.com/40x40/E4405F/white?text=IG',
                        content: '–ü–æ—Ç—Ä—è—Å–∞—é—â–µ–µ —Ñ–æ—Ç–æ –¥–Ω—è! üì∏ –ó–∞–∫–∞—Ç –Ω–∞–¥ –≥–æ—Ä–æ–¥–æ–º –ø—Ä–æ—Å—Ç–æ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω—ã–π #photography #sunset',
                        timestamp: new Date(Date.now() - Math.random() * 86400000).toISOString(),
                        likes: Math.floor(Math.random() * 1000) + 50,
                        comments: Math.floor(Math.random() * 100) + 5
                    }
                ],
                facebook: [
                    {
                        id: 'fb1',
                        platform: 'facebook',
                        author: 'Facebook Page',
                        avatar: 'https://via.placeholder.com/40x40/1877F2/white?text=FB',
                        content: '–î–µ–ª–∏–º—Å—è –≤–∞–∂–Ω—ã–º–∏ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–∞—à–∏–º–∏ –ø–æ—Å—Ç–∞–º–∏! üë•',
                        timestamp: new Date(Date.now() - Math.random() * 86400000).toISOString(),
                        likes: Math.floor(Math.random() * 500) + 25,
                        comments: Math.floor(Math.random() * 50) + 3,
                        shares: Math.floor(Math.random() * 100) + 5
                    }
                ],
                linkedin: [
                    {
                        id: 'li1',
                        platform: 'linkedin',
                        author: 'Professional Network',
                        avatar: 'https://via.placeholder.com/40x40/0A66C2/white?text=LI',
                        content: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã –∏ –∫–∞—Ä—å–µ—Ä–Ω—ã–µ —Å–æ–≤–µ—Ç—ã. –†–∞–∑–≤–∏–≤–∞–π—Ç–µ—Å—å –≤–º–µ—Å—Ç–µ —Å –Ω–∞–º–∏! üíº',
                        timestamp: new Date(Date.now() - Math.random() * 86400000).toISOString(),
                        likes: Math.floor(Math.random() * 300) + 15,
                        comments: Math.floor(Math.random() * 30) + 2
                    }
                ],
                whatsapp: [
                    {
                        id: 'wa1',
                        platform: 'whatsapp',
                        author: 'WhatsApp Status',
                        avatar: 'https://via.placeholder.com/40x40/25D366/white?text=WA',
                        content: '–°—Ç–∞—Ç—É—Å –¥–Ω—è: –ü–æ–∑–∏—Ç–∏–≤–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å! ‚ú® –û—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å –≤–ø–µ—Ä–µ–¥–∏',
                        timestamp: new Date(Date.now() - Math.random() * 86400000).toISOString()
                    }
                ]
            };
            
            const feeds = mockData[platform] || [];
            this.cache.set(cacheKey, { data: feeds, timestamp: Date.now() });
            return feeds;
        }
        
        applyFilters(feeds) {
            const filters = this.config.filters || {};
            
            if (filters.minLikes) {
                feeds = feeds.filter(feed => (feed.likes || 0) >= filters.minLikes);
            }
            
            if (filters.excludeWords && filters.excludeWords.length) {
                const excludeRegex = new RegExp(filters.excludeWords.join('|'), 'i');
                feeds = feeds.filter(feed => !excludeRegex.test(feed.content));
            }
            
            if (filters.includeHashtags && filters.includeHashtags.length) {
                const hashtagRegex = new RegExp(filters.includeHashtags.map(tag => `#${tag}`).join('|'), 'i');
                feeds = feeds.filter(feed => hashtagRegex.test(feed.content));
            }
            
            return feeds;
        }
        
        getPlatformIcon(platform) {
            const icons = {
                tiktok: 'üéµ',
                instagram: 'üì∏',
                facebook: 'üë•',
                linkedin: 'üíº',
                whatsapp: 'üí¨'
            };
            return icons[platform] || 'üì±';
        }
        
        formatTime(timestamp) {
            const date = new Date(timestamp);
            const now = new Date();
            const diff = now - date;
            
            const minutes = Math.floor(diff / 60000);
            const hours = Math.floor(diff / 3600000);
            const days = Math.floor(diff / 86400000);
            
            if (days > 0) return `${days}–¥ –Ω–∞–∑–∞–¥`;
            if (hours > 0) return `${hours}—á –Ω–∞–∑–∞–¥`;
            if (minutes > 0) return `${minutes}–º –Ω–∞–∑–∞–¥`;
            return '–¢–æ–ª—å–∫–æ —á—Ç–æ';
        }
        
        escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }
        
        startAutoRefresh() {
            const interval = this.config.refreshInterval;
            if (interval && interval > 0) {
                this.refreshTimer = setInterval(() => {
                    this.render().catch(console.error);
                }, interval);
            }
        }
        
        showError(title, error) {
            console.error('[SocialFeedsWidget]', title, error);
            this.container.innerHTML = `
                <div class="sfw-error">
                    <h3 style="margin: 0 0 15px 0;">‚ö†Ô∏è ${title}</h3>
                    <p style="margin: 0; opacity: 0.9;">ID: ${clientId}</p>
                    <details style="margin-top: 15px;">
                        <summary style="cursor: pointer;">–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏</summary>
                        <p style="margin: 10px 0 0 0; font-size: 0.9em;">${error.message}</p>
                    </details>
                </div>
            `;
        }
        
        destroy() {
            if (this.refreshTimer) {
                clearInterval(this.refreshTimer);
            }
            this.cache.clear();
        }
    }
    
    // –ê–≤—Ç–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    try {
        const widget = new SocialFeedsWidget(container, configUrl);
        container.__socialFeedsWidget = widget;
        window.SocialFeedsWidget = SocialFeedsWidget;
    } catch (error) {
        console.error('[SocialFeedsWidget] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
        container.innerHTML = `
            <div class="sfw-error">
                <strong>‚õî –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–∂–µ—Ç–∞</strong><br>
                <small>${error.message}</small>
            </div>
        `;
    }
})();
